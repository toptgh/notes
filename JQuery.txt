JQ英文文档：https://api.jquery.com/
JQ中文文档：http://jquery.cuishifeng.cn/

防止文档在完全加载（就绪）之前运行 jQuery 代码
$(document).ready(function(){

});
简洁写法（与以上写法效果相同）:
$(function(){

});

#id 选择器                $("#test")
.class 选择器             $(".test")
$(this)		选取当前 HTML 元素
$("p.intro")	选取 class 为 intro 的 <p> 元素
$("p:first")		选取第一个 <p> 元素
$("ul li:first")	选取第一个 <ul> 元素的第一个 <li> 元素
$("ul li:first-child")	选取每个 <ul> 元素的第一个 <li> 元素
$("[href]")		选取带有 href 属性的元素
$("a[target='_blank']")选取所有 target 属性值等于 "_blank" 的 <a> 元素
$(":button")	选取所有 type="button" 的 <input> 元素 和 <button> 元素
$("tr:even")	选取偶数位置的 <tr> 元素
$("tr:odd")		选取奇数位置的 <tr> 元素
$("A B") 查找A元素下面的所有子节点，包括非直接子节点
$("A>B") 查找A元素下面的直接子节点
$("A+B") 查找A元素后面的兄弟节点，包括非直接子节点
$("A~B") 查找A元素后面的兄弟节点，不包括非直接子节点

* $(selector).toggle(speed,callback);  【显示/隐藏】
1.$(selector)选中的元素的个数为n个，则callback函数会执行n次
2.callback函数名后加括号，会立刻执行函数体，而不是等到显示/隐藏完成后才执行(封装后调用)
3.callback既可以是函数名，也可以是匿名函数

fadeIn(k) 用于淡入已隐藏的元素
fadeOut() 方法用于淡出可见元素
* fadeToggle(speed,callbac) 方法 【淡入/淡出】

* $(selector).fadeTo(speed,opacity,callback); 允许渐变为给定的不透明度（值介于 0 与 1 之间）

slideDown() 方法用于向下滑动元素
slideUp() 方法用于向上滑动元素
* slideToggle(speed,callback) 【上下滑动切换】

* $(selector).animate({params},speed,callback); 【动画】
【注意】使用前需要将元素的 position 属性设置为 relative, fixed, 或 absolute!
【注意2】必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。
同时，色彩动画并不包含在核心 jQuery 库中。（使用色彩需要下载插件）
【定义相对值】需要在值的前面加上 += 或 -= 如width:'+=150px';
【 预定义的值】属性的动画值设置为 "show"、"hide" 或 "toggle"
【队列功能】
$("button").click(function(){
  var div=$("div");
  div.animate({left:'100px'},"slow");
  div.animate({fontSize:'3em'},"slow");
}); 
必需的 params 参数定义形成动画的 CSS 属性。
可选的 speed 参数规定效果的时长。它可以取以下值："slow"、"fast" 或毫秒。
可选的 callback 参数是动画完成后所执行的函数名称。

stop() 方法用于停止动画或效果，在它们完成之前
stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画
 $(selector).stop(stopAll,goToEnd);
可选的 stopAll 参数规定是否应该清除动画队列。默认是 false。即仅停止活动的动画，允许任何排入队列的动画向后执行。
可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。

Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）
$("#p1").css("color","red").slideUp(2000).slideDown(2000);

【获取值】
text() - 设置或返回所选元素的文本内容
html() - 设置或返回所选元素的内容（包括 HTML 标记）
val() - 设置或返回表单字段的值
attr() 方法用于获取属性值。如attr('href')获取为链接www.baidu.com
prop("checked")/prop("checked",true/false)：获取或设置返回值为boolean的属性
【设置值】
方法一：text('hello world'）
方法二（回调函数）：
text(function(i,origText){
      return  '旧文本'+origText+'新文本'+i+''; 
    });
i:被选元素列表中当前元素的下标
origText:原始（旧的）值

方法一：attr('href','//www.sougou.com'）
方法二（设置多属性）：
attr({
    "href" : "//www.baidu.cn/jquery", 
    "title" : "jQuery 教程" 
  })
方法三（回调函数）：
attr("href", function(i,origValue){ 
    return origValue + "/jquery"; 
  }); 

【添加元素】
append() - 在被选元素内部的结尾插入指定内容 <p>文本【插入】</p>
prepend() - 在被选元素内部的开头插入指定内容
after() - 在被选元素之后插入内容<p>文本</p>【插入】
before() - 在被选元素之前插入内容

【删除元素】
remove() - 删除被选元素（及其子元素）
remove("#a") 方法也可接受一个参数，只删除id为a的
empty() - 从被选元素中删除子元素 被选中父元素的不会删除

【操作CSS】
addClass() - 向被选元素添加一个或多个类
removeClass() - 从被选元素删除一个或多个类
*toggleClass() - 对被选元素进行添加/删除类的切换操作
*css("background") - 获取样式属性
【设置】：$("p").css("background-color","red");
【做判断时】:if($('div').css('display')=='none')
【设置多个 CSS 属性】:
css({
'display':'none'
})


【尺寸】
width() / height()  元素宽高
innerWidth() 元素宽+padding
outerWidth() 元素宽+padding+border
outerWidth(true) 元素宽+padding+border+margin


【遍历】
(祖先)
*parent() 方法返回被选元素的直接父元素
*parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)
	例子：parents('ul') 可选参数来过滤对祖先元素的搜索 只搜索带'ul'的父级元素
*parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。
	例子：$('div').parentsUntil('ul')  返回 div到ul之间的元素 不包括div和ul

（后代）
children() 方法返回被选元素的所有直接子元素
	过滤搜索 $("div").children("p.class/#id");
find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。
	例子：$('div').find('span') 找出div后代所有span
	例子： $("div").find("*"); 返回 <div> 的所有后代

（同胞）
siblings() 方法返回被选元素的所有同胞元素
next() 方法返回被选元素的下一个同胞元素
	 $("h2").next(); 返回H2的下一个同胞
nextAll() 方法返回被选元素的所有跟随的同胞元素
	 $("h2").next(); 返回H2下面的所有同胞
nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。
prev() 上一个同胞
 prevAll() 上面的全部同胞
prevUntil() 

（过滤）
first() 方法返回被选元素的首个元素。
last() 方法返回被选元素的最后一个元素。
eq() 方法返回被选元素中带有指定索引号的元素。
	例子：$("p").eq(1); 选取第二个 <p> 元素
:gt(no)		$("ul li:gt(3)")	列举 index 大于 3 的元素
:lt(no)		$("ul li:lt(3)")	列举 index 小于 3 的元素
:header		$(":header")	所有标题元素 <h1>, <h2>
:contains(text)	$(":contains('Hello')")	所有包含文本 "Hello" 的元素
:has(selector)	$("div:has(p)")	所有包含有 <p> 元素在其内的 <div> 元素

filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回
	例子：$("p").filter(".a"); 返回带a的class的元素
not() 方法返回不匹配标准的所有元素。（和上面相反）

【ajax】
$(selector).load(URL,data,callback);  方法从服务器加载数据，并把返回的数据放入被选元素中。
（URL）
	$("#div1").load("demo_test.txt #p1"); 指定文件中id为p1的元素
（callback 三个形参）
	responseTxt - 包含调用成功时的结果内容
	statusTXT - 包含调用的状态
	xhr - 包含 XMLHttpRequest 对象
	例子：if(statusTxt=="success")
       		 alert("外部内容加载成功!");
     	         if(statusTxt=="error")
       		 alert("Error: "+xhr.status+": "+xhr.statusText);
在jQuery的load()方法中，无论AJAX请求是否成功，一旦请求完成（complete）后，回调函数（callback）立即被触发。

$.get(URL,callback); 方法通过 HTTP GET 请求从服务器上请求数据
	例子:$.get("/statics/demosource/demo_test.php",function(data,status){
			alert("数据: " + data + "\n状态: " + status);
		});

$.post(URL,data,callback);  方法通过 HTTP POST 请求从服务器上请求数据。
	例子：.post("/statics/demosource/demo_test_post.php",
   		 {
    			name:"W3Cschool",
      			url:"http://www.w3cschool.cn"
    		},
   		 function(data,status){
    		  alert("数据: " + data + "状态: " + status);
   		 });
【使用多种框架为了避免冲突】
方法一：（可以直接使用jQuery代替$）
方法二：noConflict() 方法会释放对 $ 标识符的控制（存入新的变量名）
	例子： 
	var jq=$.noConflict();
	jq(document).ready(function(){
      		jq("button").click(function(){
     			 jq("p").text("jQuery 仍然在工作!");
     		 });
	});
方法三：还想使用$ ，通过例子可以在函数内使用 $ 符号了 - 而在函数外，依旧不得不使用 "jQuery"
	例子：
		$.noConflict();
		jQuery(document).ready(function($){
			 $("button").click(function(){
   				 $("p").text("jQuery 仍然在工作!");
  			});
		});



<script type="text/javascript">
  if(/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {
    window.location.href = "m-Details.html";
  }
</script>


jquery获取自定义属性的值
//获取属性值 1

<div id="text" value="黑哒哒的盟友"><div>

jQuery取值： $("#text").attr("value");

 

//获取自定义属性值 2

<div id="text" value="123"  data_obj="黑哒哒的盟友"><div>

JQUERY取值：$("#text").attr("data_obj");

 

//获取data值 3

<div id="text" value="123"  data-name="黑哒哒的盟友"><div>

JQUERY取值：$("#text").data("name");



if判断class: if ($(this).is(".addBtn")) {}


ajax:
post请求	$.post(url,data,success(data, textStatus, jqXHR),dataType)


bind() 方法为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。
$(selector).bind(event,data,function)
$("button").bind({
    click:function(){$("p").slideToggle();
},
    mouseover:function(){$("body").css("background-color","red");},  
    mouseout:function(){$("body").css("background-color","#FFFFFF");}  
  });

each 遍历
jQuery.each(function(index,item){}),index:元素下标，item每个元素
返回 false 可用于及早停止循环。
jQuery还提供了一个具有相同名称的辅助函数，可以在不事先选择或创建DOM元素的情况下调用
$.each(object,[callback]);
参数

object :需要遍历的对象或数组。

callback：每个成员/元素执行的回调函数，可选参数。格式为function(i,item){}，i和item是可选参数，其中i为对象的属性或数组的索引，item为对应属性或索引的值。如果需要退出each循环可使回调函数返回 false，其它返回值将被忽略。

eq遍历
eq() 方法将匹配元素集缩减值指定 index 上的一个。
.eq(index)

scroll() 方法触发 scroll 事件
$(selector).scroll(function)
	